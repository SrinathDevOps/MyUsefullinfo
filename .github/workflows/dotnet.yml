name: .NET Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/HelloWorldApp

      - name: Build
        run: dotnet build ./src/HelloWorldApp/HelloWorldapp.sln --configuration Release

      - name: Publish Application
        run: dotnet publish ./src/HelloWorldApp/HelloWorldapp.sln -c Release --output ./src/HelloWorldApp/myapp

      - name: Publish ACR Image
        env:
          ACR_REGISTRY: name: .NET Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/HelloWorldApp

      - name: Build
        run: dotnet build ./src/HelloWorldApp/HelloWorldapp.sln --configuration Release

      - name: Publish Application
        run: dotnet publish ./src/HelloWorldApp/HelloWorldapp.sln -c Release --output ./src/HelloWorldApp/myapp

      - name: Publish ACR Image
        env:
          ACR_REGISTRY: name: .NET Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/HelloWorldApp

      - name: Build
        run: dotnet build ./src/HelloWorldApp/HelloWorldapp.sln --configuration Release

      - name: Publish Application
        run: dotnet publish ./src/HelloWorldApp/HelloWorldapp.sln -c Release --output ./src/HelloWorldApp/myapp

      - name: Publish ACR Image
        env:
          ACR_REGISTRY: argocdsrips.azurecr.io
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        run: |
          docker buildx build --file Dockerfile --tag $ACR_REGISTRY/hello-dotnet-app:latest --push .

      - name: Set up Argo CD CLI
        run: curl -LO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x argocd-linux-amd64 && sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Login to Argo CD
        run: argocd login --insecure --username admin --password <YOUR_ARGOCD_PASSWORD> --server <YOUR_ARGOCD_SERVER>

      - name: Sync Argo CD application
        run: argocd app sync hello-dotnet-app

          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        run: |
          docker buildx build --file Dockerfile --tag $ACR_REGISTRY/hello-dotnet-app:latest --push .

      - name: Set up Argo CD CLI
        run: curl -LO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x argocd-linux-amd64 && sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Login to Argo CD
        run: argocd login --insecure --username admin --password ElevengthCorner@123 --server http://http://172.178.38.39:32764

      - name: Sync Argo CD application
        run: argocd app sync hello-dotnet-app

          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        run: |
          docker buildx build --file Dockerfile --tag $ACR_REGISTRY/hello-dotnet-app:latest --push .

      - name: Set up Argo CD CLI
        run: curl -LO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x argocd-linux-amd64 && sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Login to Argo CD
        run: argocd login --insecure --username admin --password <YOUR_ARGOCD_PASSWORD> --server <YOUR_ARGOCD_SERVER>

      - name: Sync Argo CD application
        run: argocd app sync hello-dotnet-app
